// Check if object contains item/s (returns boolean)
@function check($list, $items: null) {
	$listToCheck: null;
	$metFor:      false;
	@if $items != null {
		@if not is-map($list) {
		  @each $item in $items {
				@if not item-check($list, $item) { @return false; }
			}
		}
		@else {
			@each $key in $items {
				@if not map-has-key($list, $key) { @return false; }
			}
		}
		@return true;
	}
	@else {
		@each $item in $list {
			@if $item == 'and' {}
			@else if is-list($item) { $listToCheck: $item; }
			@else if ($item != 'for') and ($metFor == false) {
				@if $listToCheck { $listToCheck: append($listToCheck, $item, comma); }
				@else { $listToCheck: $item; }
			}
			@else if $item == 'for' { $metFor: true; }
			@else if $metFor == true {
				@if $items { $items: append($items, $item, comma); }
				@else { $items: $item; }
			}
		}
		@if not is-map($list) {
			@each $item in $items {
				@if not item-check($listToCheck, $item) { @return false; }
			}
		}
		@else {
			@each $key in $items {
				@if not map-has-key($list, $key) { @return false; }
			}
		}
		@return true;
	}
}

// Get nested [DEPTH] of a value (returns integer)
@function depth($input) {
  $level: 1;
	@if is-map($input) {
	  @each $key, $value in $input {
	    @if is-map($value) { $level: max(depth($value) + 1, $level); }
	  }
  }
	@else if is-list($input) {
	  @each $value in $input {
	    @if is-map($value) { $level: max(depth($value) + 1, $level); }
	  }
  }
  @return $level;
}

// Return boolean if item matches a specific type of object
@function is-bool($input)        { @return type-of($input) == bool; }
@function is-color($input)       { @return type-of($input) == color; }
@function is-list($input)        { @return type-of($input) == list; }
@function is-map($input)         { @return type-of($input) == map; }
@function is-null($input)        { @return type-of($input) == null; }
@function is-number($input)      { @return type-of($input) == number; }
@function is-string($input)      { @return type-of($input) == string; }
@function is-angle($input)       { @return is-num($input) and index( 'deg' 'grad' 'rad' 'turn', unit($input) ) != null; }
@function is-function($input)    { @return type-of( get-function($input) ) == function; }
@function is-integer($input)     { @return is-num($input) and round($input) == $input; }
@function is-percent($input)     { @return is-num($input) and unit($input) == '%'; }
@function is-resolution($input)  { @return is-num($input) and index( 'dpcm' 'dpi' 'dppx', unit($input) ) != null; }
@function is-time($input)        { @return is-num($input) and index( 'ms' 's', unit($input) ) != null; }
@function is-abs-length($input)  { @return is-num($input) and index( 'cm' 'in' 'mm' 'pc' 'pt' 'px', unit($input) ) != null; }
@function is-rel-length($input)  { @return is-num($input) and index( 'ch' 'em' 'ex' 'rem', unit($input) ) != null; }
@function is-rel-percent($input) { @return is-num($input) and index( '%' 'vh' 'vmax' 'vmin' 'vw', unit($input) ) != null; }
@function is-rel-view($input)    { @return is-num($input) and index( 'vh' 'vmax' 'vmin' 'vw', unit($input) ) != null; }
@function is-rel($input)         { @return is-rel-length($input) or is-rel-percent($input); }
@function is-relative($input)    { @return is-rel-length($input) or is-rel-percent($input); }
@function is-length($input)      { @return is-rel-length($input) or is-abs-length($input); }
@function is-position($input)    { @return index( 'top' 'right' 'bottom' 'left' 'center' 'middle', $input) != null; }
@function is-word($input)        { @return index( 'with' 'and' 'to' 'for' 'by' 'of' 'from', $input) != null; }
@function is-nest($input)         { @if is-map($input) { @each $key, $value in $input { @if is-map($value) { @return true; } } } @return false; }

// Check if a list contains a single value (returns boolean)
@function item-check($list, $value) {
	$modvalue: $value;
	$modtype:  null;
	@each $item in $list {
		@if $item == $value { @return true;	}
	}
	@return false;
}

@function its($input, $outUnits: null, $base: strip(nest-get(base rem))) {
	$output:     null;
	$modifier:   null;
	$inUnits:    null;
	$multiplier: 1;
	$unitList:   'em' 'rem' 'ex' 'ch' '%' 'vw' 'vh' 'vmin' 'vmax' 'px' 'cm' 'mm' 'in' 'pt' 'pc';
	$inputLength: length($input);
	@if $inputLength > 1 {
		$outUnits: nth($input, $inputLength);
		$input: nth($input, 1);
	}
	// Check input is a number
	@if is-num($input) {
		// set default units if none entered
		@if not $outUnits { $outUnits: nest-get(unit); }
		// set incoming units
		@if unitless($input) { $inUnits: 'px'; }
		@else { $inUnits: unit($input);	$input: strip($input); }
		@if not check($unitList for $inUnits) { $inUnits: 'px'; }
		// set modifiers
		@if $outUnits == 'em'         { $modifier: 1em; }	  // relative
		@else if $outUnits == 'rem'   { $modifier: 1rem; }
		@else if $outUnits == 'ex'    { $modifier: 1ex; }
		@else if $outUnits == 'ch'    { $modifier: 1ch; }
		@else if $outUnits == '%'     { $modifier: 1%; }    // relative percentage
		@else if $outUnits == 'vw'    { $modifier: 1vw; }
		@else if $outUnits == 'vh'    { $modifier: 1vh; }
		@else if $outUnits == 'vmin'  { $modifier: 1vmin; }
		@else if $outUnits == 'vmax'  { $modifier: 1vmax; }
		@else if $outUnits == 'px'    { $modifier: 1px; }	  // length
		@else if $outUnits == 'cm'    { $modifier: 1cm; }
		@else if $outUnits == 'mm'    { $modifier: 1mm; }
		@else if $outUnits == 'in'    { $modifier: 1in; }
		@else if $outUnits == 'pt'    { $modifier: 1pt; }
		@else if $outUnits == 'pc'    { $modifier: 1pc; }
		// calculate outgoing values
		@if ($inUnits == 'px') or ($inUnits == 'em') or ($inUnits == 'rem') {
			// convert to pixel value
			@if ($inUnits == 'em') or ($inUnits == 'rem') {	$input: $input * $base;	}
			// calculate multipliers
			@if ($outUnits == 'em') or ($outUnits == 'rem') {	$multiplier: $base;	}
			@else if $outUnits == 'cm' { $multiplier: 37.75953; }
			@else if $outUnits == 'mm' { $multiplier: 3.77595; }
			@else if $outUnits == 'in' { $multiplier: 96; }
			@else if $outUnits == 'pt' { $multiplier: 1.33333; }
			@else if $outUnits == 'pc' { $multiplier: 16; }
			// final calculation
			$input: ($input / $multiplier);
		}
		@else if ($inUnits == 'cm') or ($inUnits == 'mm') or ($inUnits == 'in') or ($inUnits == 'pt') or ($inUnits == 'pc') {
			// convert to inch value
			@if $inUnits == 'cm' { $input: $input / 2.54; }
			@if $inUnits == 'mm' { $input: $input / 25.4; }
			@if $inUnits == 'pt' { $input: $input / 72; }
			@if $inUnits == 'pc' { $input: $input / 6; }
			// calculate multipliers
			@if ($outUnits == 'em') or ($outUnits == 'rem') { $multiplier: 96 / $base; }
			@if $outUnits == 'cm' { $multiplier: 2.54; }
			@if $outUnits == 'mm' { $multiplier: 25.4; }
			@if $outUnits == 'pt' { $multiplier: 72; }
			@if $outUnits == 'pc' { $multiplier: 6; }
			@if $outUnits == 'px' { $multiplier: 96; }
			// final calculation
			$input: ($input * $multiplier);
		}
		// clean up output
		$input: round($input * 1000) / 1000;
		// add outgoing units and output
		$output: $input * $modifier;
		@return $output;
	}
	@else {
		@warn 'Unknown its() value "#{$input}" must be a number.';
		@return null;
	}
};

// Return value of specified key/s
@function nest-get($input, $map: $fether--nest) {
  @each $key in $input { $map: map-get($map, $key); }
  @return $map;
}

// Return map of all keys and values inside specified object
@function nest-pull($input, $map: $fether--nest) {
  $returnMap: null;
  $map: nest-get($input);
  $depth: depth($map);
  @for $i from 1 through $depth {
    @each $key, $value in $map {
      $mapKeys: map-keys($map);
      $index: index($mapKeys, $key);
      @if not is-map($value) {
        $value: ( $key: $value );
        @if $index == 1 { $returnMap: $value; }
        @else { $returnMap: map-merge($returnMap, $value); }
      }
      @else if is-map($value) {
        @if $index == 1 and $i == 1 { $returnMap: $value; }
        @else { $returnMap: map-merge($returnMap, $value); }
        $returnMap: map-remove($returnMap, $key);
      }
    }
    @if $i == 1 { $map: $returnMap; }
    @else { $map: map-merge($map, $returnMap); }
  }
  @return $map;
}

@function nest-pull-local($input, $map: $fether--nest, $scope: local) {
  @return nest-pull($input, $map, $scope);
}

// Returns the value of a map key
@function map-pull($map, $keys) {
  @each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}

// Change a map key
@function map-push($map, $keys, $newValue) {
  $maps: ($map,);
  $output: null;
  @if type-of(nth($keys, -1)) == map { @warn 'You are overwriting a map with "#{$newValue}" in map-push().'; }
  @if length($keys) == 1 { @return map-merge($map, ($keys: $newValue)); }
  @for $i from 1 through (length($keys) - 1) {
    $currentKey: nth($keys, $i);
    $currentMap: nth($maps, -1);
    $currentGet: map-get($currentMap, $currentKey);
    @if $currentGet == null { @error 'No "#{$key}" found at map-push() location.'; }
    $maps: append($maps, $currentGet);
  }
  @for $i from length($maps) through 1 {
    $currentMap: nth($maps, $i);
    $currentKey: nth($keys, $i);
    $current-val: if($i == length($maps), $newValue, $output);
    $output: map-merge($currentMap, ($currentKey: $current-val));
  }
  @return $output;
}

// Calculate the power of a number i.e. power(2, 4) -> 16
@function power($number, $power) {
  @if (is-num($number)) and (is-num($power)) {
    $output: 1 !default;
    @if $power >= 0 {
      @for $var from 1 through $power { $output: $output * $number; }
    } @else {
      @for $var from $power to 0 { $output: $output / $number; }
    }
    @return $output;
  }
  @else {
    @if not is-num($number) { @warn 'Unknown power() number: #{$number}'; }
    @if not is-num($power)  { @warn 'Unknown power() power: #{$power}'; }
  }
}

// Strip units from a number i.e. strip(100px) -> 100
@function strip($number) {
  @if is-num($number) {
    $output: $number / ($number * 0 + 1);
    @return $output;
  }
  @else { @warn 'Unknown strip() value: #{$number}'; }
}












//
//
//
//
/////////////////////////////  E x t e n d o r s  /////////////////////////////

@if default(container) {
	// Create list of containers
	$containerMap:  nest-get(container);
	$containerNames: map-keys($containerMap);
	@each $element in $containerNames {
	  // Retrieve settings
	  $getContainer:      map-pull($containerMap, $element 'width');
	  $getContainerAlign: map-pull($containerMap, $element 'align');
	  // Create placeholders
	  %container__#{$element} {
	    display: block;
	    width: 100%;
	    @if (is-num($getContainer)) and ($getContainer != 100%) {
	      @if unitless($getContainer) { max-width: its($getContainer);  }
	      @else { max-width: $getContainer; }
	    }
	    @if $getContainerAlign == centered   { margin: 0 auto; }
	    @else if $getContainerAlign == left  { margin: 0 auto 0 0; }
	    @else if $getContainerAlign == right { margin: 0 0 0 auto; }
	  }
	}
}

@if default(type) {
	// Create list of typography styles
	$textMap:   nest-get(type);
	$textNames: map-keys($textMap);
	@each $style in $textNames {
	  // Retrieve settings
	  $getSize:     map-pull($textMap, $style 'size');
	  $getLeading:  map-pull($textMap, $style 'leading');
	  $getTracking: map-pull($textMap, $style 'tracking');
	  $getWeight:   map-pull($textMap, $style 'weight');
	  $getBase:     map-pull($textMap, $style 'base');
	  // Create placeholders
	  %text__#{$style} {
	    @if $getSize != no     { font-size:      its($getSize); }
	    @if $getLeading != no  { line-height:    its($getLeading); }
	    @if $getTracking != no { letter-spacing: its($getTracking); }
	    @if $getWeight != no   { font-weight:    weight($getWeight); }
	    @if $getBase != no     { margin-bottom:  its($getBase); }
	  }
	}
}















//
//
//
//
///////////////////////////  C o r e   F u n M i x  ///////////////////////////

// Add material box shadow by depth(dp) value
@function elevate($depth) {
  $shadow:         none;
  $layerPrimary:   null;
  $layerSecondary: null;
  $layerTertiary:  null;
  @if $depth != 'none' {
    @if is-num($depth) {
      @if not unitless($depth) { $depth: strip($depth); }
      @if $depth <= 0 { $depth: 0; }
      @else if $depth >= 100 { $depth: $depth * .01; }
      @if $depth > 24 { $depth: 24; }
    } @else { @warn 'Unknown elevation value: #{$depth}'; }
    $slpTwo: $depth * 1;
    $slpThree: $depth * 1.25;
    $slpFour: $depth * .125;
    $slp-opacity: (.12 + ($depth * .00125)) * 100%;
    $slp-rgba: cast(black $slp-opacity);
    $slsTwo: $depth * .375;
    $slsThree: $depth * .53;
    $slsFour: -2 + ($depth * .4375);
    $sltTwo: $depth * .5;
    $sltThree: 2 + ($depth * .5);
    $sltFour: $depth * -.3125;
    $slt-opacity: (.1 + ($depth * .00625)) * 100%;
    $slt-rgba: cast(black $slt-opacity);
    $layerPrimary:   0 its($slpTwo) its($slpThree) its($slpFour) $slp-rgba;
    $layerSecondary: 0 its($slsTwo) its($slsThree) its($slsFour) cast(black 15%);
    $layerTertiary:  0 its($sltTwo) its($sltThree) its($sltFour) $slt-rgba;
  }
  @if $depth != 0 { $shadow: $layerPrimary, $layerSecondary, $layerTertiary; }
  @return $shadow;
}
@mixin elevate($depth) {
  box-shadow: elevate($depth);
}

// Calculate font weight from standard font weight names
@function weight($weight: nest-get(type body weight)) {
	$weightList:     nest-get(font weight);
  $weightNameList: map-keys( $weightList );
  @if check($weightNameList, $weight) {
    $weight: map-get($weightList, $weight);
    @return $weight;
  }
  @else if is-num($weight) { @return $weight; }
  @else {
		@warn 'Unknown weight() name or value: #{$weight}';
		@return null;
	}
}
@mixin weight($weight: nest-get(type body weight)) {
  font-weight: weight($weight);
}
